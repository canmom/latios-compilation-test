//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""LeftHandController"",
            ""id"": ""5141572a-202f-4912-80b9-78e1b92c385b"",
            ""actions"": [
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""d887de7d-bdf0-41fd-83f8-0e3738b31e45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""4b66a89d-558c-4b34-97c9-5e29b31e9d99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""7264b9c7-f71c-4957-9044-fc9f3e980abe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""76d7e40a-dd95-41a6-966a-0df1ed64366c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""56a30aa1-7a65-447f-aa57-26eb897bd67e"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""740f1c72-9d5b-4a5e-87f0-089b56df8622"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThumbStick"",
                    ""type"": ""Value"",
                    ""id"": ""7bacbe6e-5c2d-4784-a801-ac1387775697"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""259a4227-14d4-4e85-afe4-159b0ddfeef6"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4db27cdc-6a66-4bd5-995b-7953f0459070"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa8d890b-0013-48fe-b69a-f81dc410a619"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""414f0e89-c91d-4c4f-bc87-52191dd5d86e"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2971d4a-9ab5-4db3-9b00-570fe2dfe40f"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9322f788-7d27-471d-ae1d-f23887acd64d"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThumbStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e4cefd4-8f04-4fc0-8ba5-1916943f156f"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHandController"",
            ""id"": ""6e8f48f8-bd90-447a-9b84-a9530513148e"",
            ""actions"": [
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""d3c0ccc3-0a1f-4daa-8ba5-4949555121e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""fd1eb0d9-67f8-4d73-8e53-2c62ebad292e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""51070f5a-5d57-4bc2-9c18-a0e3db1f38a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""915aa38a-5332-42dd-8169-e43bb63a1f93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""cc1752af-211e-474e-a25a-a6342c48e131"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""2c7d92d5-e43d-4163-932e-d82652c6f197"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThumbStick"",
                    ""type"": ""Value"",
                    ""id"": ""555e12a0-97c2-4898-a394-6c142830aad3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0fec8deb-cb6f-4403-b999-ddb89a0c3bf7"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e02b6ee-7cd2-4b45-9718-04377881ec17"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10c1749c-6038-452a-a01a-7727ea2b3e68"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26dfc480-c65a-4f54-90cb-f9d92ac61af1"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88181094-4c21-47d7-8540-91f3f4207702"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""247076fd-b3bc-4b9c-9b7f-42403bbc8b2f"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThumbStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d606081d-8f68-4248-ab28-f965a7c0455b"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Headset"",
            ""id"": ""99269c33-a604-4bef-be20-cecf8ca189af"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""01822631-2fa6-439d-bcdb-bb71ac2fa008"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""6f3da410-dfcb-46e5-8700-bf34aebdbbbe"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c89dff89-51c1-410c-936f-e15a1c6c450f"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13bf0fc5-b3f0-4a76-bc67-15a9a575777d"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Oculus"",
            ""bindingGroup"": ""Oculus"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LeftHandController
        m_LeftHandController = asset.FindActionMap("LeftHandController", throwIfNotFound: true);
        m_LeftHandController_Trigger = m_LeftHandController.FindAction("Trigger", throwIfNotFound: true);
        m_LeftHandController_Grip = m_LeftHandController.FindAction("Grip", throwIfNotFound: true);
        m_LeftHandController_PrimaryButton = m_LeftHandController.FindAction("PrimaryButton", throwIfNotFound: true);
        m_LeftHandController_SecondaryButton = m_LeftHandController.FindAction("SecondaryButton", throwIfNotFound: true);
        m_LeftHandController_Position = m_LeftHandController.FindAction("Position", throwIfNotFound: true);
        m_LeftHandController_Rotation = m_LeftHandController.FindAction("Rotation", throwIfNotFound: true);
        m_LeftHandController_ThumbStick = m_LeftHandController.FindAction("ThumbStick", throwIfNotFound: true);
        // RightHandController
        m_RightHandController = asset.FindActionMap("RightHandController", throwIfNotFound: true);
        m_RightHandController_Trigger = m_RightHandController.FindAction("Trigger", throwIfNotFound: true);
        m_RightHandController_Grip = m_RightHandController.FindAction("Grip", throwIfNotFound: true);
        m_RightHandController_PrimaryButton = m_RightHandController.FindAction("PrimaryButton", throwIfNotFound: true);
        m_RightHandController_SecondaryButton = m_RightHandController.FindAction("SecondaryButton", throwIfNotFound: true);
        m_RightHandController_Position = m_RightHandController.FindAction("Position", throwIfNotFound: true);
        m_RightHandController_Rotation = m_RightHandController.FindAction("Rotation", throwIfNotFound: true);
        m_RightHandController_ThumbStick = m_RightHandController.FindAction("ThumbStick", throwIfNotFound: true);
        // Headset
        m_Headset = asset.FindActionMap("Headset", throwIfNotFound: true);
        m_Headset_Position = m_Headset.FindAction("Position", throwIfNotFound: true);
        m_Headset_Rotation = m_Headset.FindAction("Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftHandController
    private readonly InputActionMap m_LeftHandController;
    private List<ILeftHandControllerActions> m_LeftHandControllerActionsCallbackInterfaces = new List<ILeftHandControllerActions>();
    private readonly InputAction m_LeftHandController_Trigger;
    private readonly InputAction m_LeftHandController_Grip;
    private readonly InputAction m_LeftHandController_PrimaryButton;
    private readonly InputAction m_LeftHandController_SecondaryButton;
    private readonly InputAction m_LeftHandController_Position;
    private readonly InputAction m_LeftHandController_Rotation;
    private readonly InputAction m_LeftHandController_ThumbStick;
    public struct LeftHandControllerActions
    {
        private @PlayerInput m_Wrapper;
        public LeftHandControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trigger => m_Wrapper.m_LeftHandController_Trigger;
        public InputAction @Grip => m_Wrapper.m_LeftHandController_Grip;
        public InputAction @PrimaryButton => m_Wrapper.m_LeftHandController_PrimaryButton;
        public InputAction @SecondaryButton => m_Wrapper.m_LeftHandController_SecondaryButton;
        public InputAction @Position => m_Wrapper.m_LeftHandController_Position;
        public InputAction @Rotation => m_Wrapper.m_LeftHandController_Rotation;
        public InputAction @ThumbStick => m_Wrapper.m_LeftHandController_ThumbStick;
        public InputActionMap Get() { return m_Wrapper.m_LeftHandController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandControllerActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandControllerActionsCallbackInterfaces.Add(instance);
            @Trigger.started += instance.OnTrigger;
            @Trigger.performed += instance.OnTrigger;
            @Trigger.canceled += instance.OnTrigger;
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @SecondaryButton.started += instance.OnSecondaryButton;
            @SecondaryButton.performed += instance.OnSecondaryButton;
            @SecondaryButton.canceled += instance.OnSecondaryButton;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @ThumbStick.started += instance.OnThumbStick;
            @ThumbStick.performed += instance.OnThumbStick;
            @ThumbStick.canceled += instance.OnThumbStick;
        }

        private void UnregisterCallbacks(ILeftHandControllerActions instance)
        {
            @Trigger.started -= instance.OnTrigger;
            @Trigger.performed -= instance.OnTrigger;
            @Trigger.canceled -= instance.OnTrigger;
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @SecondaryButton.started -= instance.OnSecondaryButton;
            @SecondaryButton.performed -= instance.OnSecondaryButton;
            @SecondaryButton.canceled -= instance.OnSecondaryButton;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @ThumbStick.started -= instance.OnThumbStick;
            @ThumbStick.performed -= instance.OnThumbStick;
            @ThumbStick.canceled -= instance.OnThumbStick;
        }

        public void RemoveCallbacks(ILeftHandControllerActions instance)
        {
            if (m_Wrapper.m_LeftHandControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandControllerActions @LeftHandController => new LeftHandControllerActions(this);

    // RightHandController
    private readonly InputActionMap m_RightHandController;
    private List<IRightHandControllerActions> m_RightHandControllerActionsCallbackInterfaces = new List<IRightHandControllerActions>();
    private readonly InputAction m_RightHandController_Trigger;
    private readonly InputAction m_RightHandController_Grip;
    private readonly InputAction m_RightHandController_PrimaryButton;
    private readonly InputAction m_RightHandController_SecondaryButton;
    private readonly InputAction m_RightHandController_Position;
    private readonly InputAction m_RightHandController_Rotation;
    private readonly InputAction m_RightHandController_ThumbStick;
    public struct RightHandControllerActions
    {
        private @PlayerInput m_Wrapper;
        public RightHandControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trigger => m_Wrapper.m_RightHandController_Trigger;
        public InputAction @Grip => m_Wrapper.m_RightHandController_Grip;
        public InputAction @PrimaryButton => m_Wrapper.m_RightHandController_PrimaryButton;
        public InputAction @SecondaryButton => m_Wrapper.m_RightHandController_SecondaryButton;
        public InputAction @Position => m_Wrapper.m_RightHandController_Position;
        public InputAction @Rotation => m_Wrapper.m_RightHandController_Rotation;
        public InputAction @ThumbStick => m_Wrapper.m_RightHandController_ThumbStick;
        public InputActionMap Get() { return m_Wrapper.m_RightHandController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandControllerActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandControllerActionsCallbackInterfaces.Add(instance);
            @Trigger.started += instance.OnTrigger;
            @Trigger.performed += instance.OnTrigger;
            @Trigger.canceled += instance.OnTrigger;
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @SecondaryButton.started += instance.OnSecondaryButton;
            @SecondaryButton.performed += instance.OnSecondaryButton;
            @SecondaryButton.canceled += instance.OnSecondaryButton;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @ThumbStick.started += instance.OnThumbStick;
            @ThumbStick.performed += instance.OnThumbStick;
            @ThumbStick.canceled += instance.OnThumbStick;
        }

        private void UnregisterCallbacks(IRightHandControllerActions instance)
        {
            @Trigger.started -= instance.OnTrigger;
            @Trigger.performed -= instance.OnTrigger;
            @Trigger.canceled -= instance.OnTrigger;
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @SecondaryButton.started -= instance.OnSecondaryButton;
            @SecondaryButton.performed -= instance.OnSecondaryButton;
            @SecondaryButton.canceled -= instance.OnSecondaryButton;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @ThumbStick.started -= instance.OnThumbStick;
            @ThumbStick.performed -= instance.OnThumbStick;
            @ThumbStick.canceled -= instance.OnThumbStick;
        }

        public void RemoveCallbacks(IRightHandControllerActions instance)
        {
            if (m_Wrapper.m_RightHandControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandControllerActions @RightHandController => new RightHandControllerActions(this);

    // Headset
    private readonly InputActionMap m_Headset;
    private List<IHeadsetActions> m_HeadsetActionsCallbackInterfaces = new List<IHeadsetActions>();
    private readonly InputAction m_Headset_Position;
    private readonly InputAction m_Headset_Rotation;
    public struct HeadsetActions
    {
        private @PlayerInput m_Wrapper;
        public HeadsetActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Headset_Position;
        public InputAction @Rotation => m_Wrapper.m_Headset_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Headset; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadsetActions set) { return set.Get(); }
        public void AddCallbacks(IHeadsetActions instance)
        {
            if (instance == null || m_Wrapper.m_HeadsetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeadsetActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IHeadsetActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IHeadsetActions instance)
        {
            if (m_Wrapper.m_HeadsetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeadsetActions instance)
        {
            foreach (var item in m_Wrapper.m_HeadsetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeadsetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeadsetActions @Headset => new HeadsetActions(this);
    private int m_OculusSchemeIndex = -1;
    public InputControlScheme OculusScheme
    {
        get
        {
            if (m_OculusSchemeIndex == -1) m_OculusSchemeIndex = asset.FindControlSchemeIndex("Oculus");
            return asset.controlSchemes[m_OculusSchemeIndex];
        }
    }
    public interface ILeftHandControllerActions
    {
        void OnTrigger(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnPrimaryButton(InputAction.CallbackContext context);
        void OnSecondaryButton(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnThumbStick(InputAction.CallbackContext context);
    }
    public interface IRightHandControllerActions
    {
        void OnTrigger(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnPrimaryButton(InputAction.CallbackContext context);
        void OnSecondaryButton(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnThumbStick(InputAction.CallbackContext context);
    }
    public interface IHeadsetActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
